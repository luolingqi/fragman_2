#!/usr/bin/perl -w

#===================================================================================================
#File		: prepare_ligand.pl
#Description	: This program takes from user either 1) PDB file or 2) Isomeric SMILES file and con
#		  -verts to Mol2 format for parameterization in various other programs
#Author		: Chi Ho Ngan, Structural Bioinformatics Laboratory, Boston University
#Version	: 1.0
#Created	: 01/26/2011 12:34:12 AM
#Requires	:
#Followed	:
#===================================================================================================

use strict; use Cwd; use Getopt::Long;

print "SMALL_MOLECULE_PREPARE.PL START\n";

my($cwd, $filename, $filetype, $chartype, $hydrogen, $formlchg, $molename, @charge_array, $count_net);

my $param_root="/home/ftmap/parameterization";

if (scalar @ARGV < 9){	
	short_args(); exit;
}

$filetype = '';
$chartype = '';
$hydrogen = '';
$formlchg = '';
GetOptions (	'filetype=s'=>\$filetype, 
		'chartype=s'=>\$chartype,
		'hydrogen=s'=>\$hydrogen,
		'formlchg=i'=>\$formlchg);

$filename = shift(@ARGV);
$molename = substr($filename, 0, 3);

if ($filetype eq 'ism'){
	@charge_array = `rdkit_ism_sdf.py $filename $molename`;	# RDKit creates full hydrogen model generates 3D
												# coordinates based on isomeric SMILES
	$charge_array[0] =~ s/\s+//; $charge_array[0] =~ /([-+]?[0-9]+)/;
	$count_net = $charge_array[0];
	print "RDKit Formal Charge: $count_net (Input: Isomeric SMILES File)\n";

	if (-s "$molename.sdf") {
	}
	else {
		die "Check ism file, $molename.sdf not properly created (by RDKit)    :$!\n";
	}
	
	system "babel -isdf $molename.sdf -opdb $molename.pdb";					# OpenBabel creates PDB file from RDKIT SDF file

	if (-s "$molename.pdb") {
	}
	else {
		die "Check sdf file, $molename.pdb not properly created (by OpenBabel):$!\n";
	}
	
	system "add_atom_number.pl $molename.pdb";			# Adds a unique atom serial number to every atom
	system "babel -ipdb $molename.pdb -omol2 $molename.mol2";
	system "mkdir files_gencharges";
	
	gencharges();
}

elsif ($filetype eq 'pdb') {
	$count_net = $formlchg;

	if ($hydrogen eq "abs") {
		system "babel -ipdb $molename.pdb -omol2 $molename.mol2 -h";			# OpenBabel creates full hydrogen model using PDB
	}
	else {
		system "babel -ipdb $molename.pdb -omol2 $molename.mol2";
	}

	system "mkdir files_gencharges"; system "mv $filename files_gencharges/";

	gencharges();
}
 
else {
	die "Check file format. Only ism or pdb is accepted\n";
}

print "SMALL_MOLECULE_PREPARE.PL FINISH\n";

#===================================================================================================
sub short_args
{
        printf ("usage  :       $0 options filename\n");					# PDB file or Isomeric SMILES file
        printf ("argvs  :       --filetype ism ,pdb\n");
        printf ("               --chartype bcc ,rsp\n");
        printf ("               --hydrogen pre ,abs\n");					# pre: full hydrogen model; if abs is selected a
        printf ("               --formlchg integers\n");					# full hydrogen model will be generated by open-
        printf ("\n");										# babel, and the molecule has no formal charge/s
}												# --formlchg: enter 0 if isomeric smiles are sub
												# -mitted (isomeric SMILES should contain formal
												# charges)
sub gencharges
{
	print "GEN_CHG_RDKIT.PL START\n";
	system "gen_chg_rdkit.pl --chartype $chartype --hydrogen $hydrogen --count_net $count_net $molename";	# produces molename-bcc.pdb/ mol2
	print "GEN_CHG_RDKIT.PL FINISH\n";
	system "mv ANTECHAMBER* ATOMTYPE.INF *inp* *.ac *gau* *.dat *.log files_gencharges/";
	print "RTF_UFY.PL START\n";
	system "rtf_ufy.pl $molename";				# unifies charges in original RTF
	print "RTF_UFY.PL FINISH\n";
	print "MAP_TO_ORIG_COORDINATES.PL START\n";
	system "map_to_orig_coordinates.pl tmp_gjftogms/nac $molename-$chartype.pdb $molename";			# recover original coordinates
	print "MAP_TO_ORIG_COORDINATES.PL FINISH\n";
	system "cp $molename-$chartype.pdb $molename-$chartype\_antechamber_coordinates.pdb";
	system "mv $molename-$chartype\_antechamber_coordinates.pdb $molename-$chartype.mol2 files_gencharges/";
	system "mv $molename\_new.pdb $molename-$chartype.pdb";
	print "PDBPREP.PL START\n";
	system "pdbprep.pl $molename-$chartype.pdb";
        print "PDBPREP.PL FINISH\n";
	print "PREPENDING_ATOMTYPES.PL START\n";
	system "prepending_atomtypes.pl $chartype $molename\_unify.rtf $molename-$chartype-x.0000.pdb $molename";
	print "PREPENDING_ATOMTYPES.PL FINISH\n";
	system "mv $molename.rtf $molename.prm files_gencharges/";
	system "cp $param_root/gaff2mol2 .";
	print "SUBATOM.PL START\n";
	system "subatom.pl $molename\_unify.rtf $molename\_unify.prm gaff2mol2 100";
	print "SUBATOM.PL FINISH\n";
	print "MAP_NAMES.PL START\n";
	system "map_names.pl $molename.mol2 $molename-$chartype-x.0000.pdb $molename\_final.rtf atoms_subatom";
	print "MAP_NAMES.PL FINISH\n";
	system "rm *unify*";
	system "mkdir files_bef_rename";
	system "mv subatom.inp gaff2mol2 $molename-$chartype-x.0000.pdb $molename\_final.rtf atoms_subatom files_bef_rename/";
	system "mv $molename-$chartype-x.0000.pdb.rename $molename-$chartype-x.0000.pdb";
	system "mv $molename\_final.rtf.rename $molename\_final.rtf";
	system "mv atoms_subatom.rename atoms_subatom";
	print "PDBCHM.PL START\n";
	system "pdbchm.pl --prm $molename\_final.prm --rtf $molename\_final.rtf --nsteps 1 $molename-$chartype x";
	print "PDBCHM.PL FINISH\n";
	print "PDBNMD.PL START\n";
	system "pdbnmd.pl --prm $molename\_final.prm --rtf $molename\_final.rtf --nsteps 1 --xplor-psf $molename-$chartype x";
	print "PDBNMD.PL FINISH\n";
	if (-z "$molename-$chartype\_cmin.pdb") {
		if (-z "$molename-$chartype\_nmin.pdb") {
			print "$molename-$chartype\_cmin.pdb or $molename-$chartype\_nmin.pdb not properly created...e    xiting\n"; exit;
		}
	}
	if (-s "$molename-$chartype\_cmin.pdb") {
	}
	elsif (-s "$molename-$chartype\_nmin.pdb") {
	}
	else {
		print "$molename-$chartype\_cmin.pdb or $molename-$chartype\_nmin.pdb not properly created...exiting\n    "; exit;
	}
	#Source pdbamino file
	system "cp $param_root/pdbamino.param.rtf ./pdbamino.rtf";
	#Source parm file
	system "cp $param_root/parm.param.prm ./parm.prm";
	#Source atoms file
	system "cp $param_root/atoms.0.0.6.sm.complexs86.5.0A.relinowangobs.wangdocked.proteinACEsmmol2.param .";
	print "CONCATE.PL START\n";
	system "concate.pl pdbamino.rtf parm.prm atoms.0.0.6.sm.complexs86.5.0A.relinowangobs.wangdocked.proteinACEsmmol2.param  $molename\_final.rtf $molename\_final.prm atoms_subatom";
	print "CONCATE.PL FINISH\n";
	system "mkdir files_components";
	system "mv pdbamino.rtf parm.prm atoms.0.0.6.sm.complexs86.5.0A.relinowangobs.wangdocked.proteinACEsmmol2.param files_components/";
	system "mv atoms_subatom $molename\_final.rtf $molename\_final.prm files_components/";
	system "mv $molename.mol2 files_gencharges/";
#	system "rm -r tmp* path";
}
